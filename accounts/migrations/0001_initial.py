# Generated by Django 4.2.6 on 2023-11-04 09:29

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('userID', models.AutoField(editable=False, primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('attendanceID', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('checkintime', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Classes',
            fields=[
                ('classID', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('checkincode', models.CharField(max_length=6)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('courseID', models.CharField(max_length=16)),
                ('sectionID', models.SmallIntegerField()),
                ('courseName', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('roleID', models.IntegerField(choices=[(1, 'Student'), (2, 'Teacher'), (3, 'Administrator')], primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='TeacherAssignment',
            fields=[
                ('assignmentID', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('courseID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='TAcourseID', to='accounts.course')),
                ('sectionID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='TAsectionID', to='accounts.course')),
                ('userID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='TAuserID', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('enrollmentID', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('courseID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='EnrollCourseID', to='accounts.course')),
                ('sectionID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='EnrollSectionID', to='accounts.course')),
                ('userID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='EnrollUserID', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='course',
            constraint=models.UniqueConstraint(fields=('courseID', 'sectionID'), name='courses'),
        ),
        migrations.AddField(
            model_name='classes',
            name='courseID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ClassCourseID', to='accounts.course'),
        ),
        migrations.AddField(
            model_name='classes',
            name='sectionID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ClassSectionID', to='accounts.course'),
        ),
        migrations.AddField(
            model_name='attendance',
            name='classID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='AttendanceClassID', to='accounts.classes'),
        ),
        migrations.AddField(
            model_name='attendance',
            name='userID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='AttendanceUserID', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='roleID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='accounts.role'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
